// Code generated by sqlc. DO NOT EDIT.
// source: tag.sql

package db

import (
	"context"
)

const addTagToQuiz = `-- name: AddTagToQuiz :exec
INSERT INTO tags_quizzes (tag_id, quiz_id) VALUES ($1, $2)
`

type AddTagToQuizParams struct {
	TagID  int64 `json:"tag_id"`
	QuizID int64 `json:"quiz_id"`
}

func (q *Queries) AddTagToQuiz(ctx context.Context, arg AddTagToQuizParams) error {
	_, err := q.db.ExecContext(ctx, addTagToQuiz, arg.TagID, arg.QuizID)
	return err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name)
VALUES ($1)
ON CONFLICT (name) DO UPDATE
    SET name = EXCLUDED.name
RETURNING id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagsForQuiz = `-- name: GetTagsForQuiz :many
SELECT t.id, t.name FROM tags t
INNER JOIN tags_quizzes tq ON t.id = tq.tag_id
WHERE tq.quiz_id = $1
`

func (q *Queries) GetTagsForQuiz(ctx context.Context, quizID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForQuiz, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name from tags
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromQuiz = `-- name: RemoveTagFromQuiz :exec
DELETE FROM tags_quizzes WHERE tag_id = $1 AND quiz_id = $2
`

type RemoveTagFromQuizParams struct {
	TagID  int64 `json:"tag_id"`
	QuizID int64 `json:"quiz_id"`
}

func (q *Queries) RemoveTagFromQuiz(ctx context.Context, arg RemoveTagFromQuizParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromQuiz, arg.TagID, arg.QuizID)
	return err
}
