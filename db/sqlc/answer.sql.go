// Code generated by sqlc. DO NOT EDIT.
// source: answer.sql

package db

import (
	"context"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (
    question_id,
    text,
    is_correct
) VALUES (
    $1, $2, $3
)
RETURNING id, text, question_id, is_correct, created_at
`

type CreateAnswerParams struct {
	QuestionID int64  `json:"question_id"`
	Text       string `json:"text"`
	IsCorrect  bool   `json:"is_correct"`
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer, arg.QuestionID, arg.Text, arg.IsCorrect)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.QuestionID,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE from answers
WHERE id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, id)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, text, question_id, is_correct, created_at FROM answers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnswer(ctx context.Context, id int64) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.QuestionID,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}

const listAnswers = `-- name: ListAnswers :many
SELECT id, text, question_id, is_correct, created_at FROM answers
WHERE question_id = $1
ORDER BY id
`

func (q *Queries) ListAnswers(ctx context.Context, questionID int64) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, listAnswers, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.QuestionID,
			&i.IsCorrect,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answers
SET (text, is_correct) = ($2, $3)
WHERE id = $1
RETURNING id, text, question_id, is_correct, created_at
`

type UpdateAnswerParams struct {
	ID        int64  `json:"id"`
	Text      string `json:"text"`
	IsCorrect bool   `json:"is_correct"`
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, updateAnswer, arg.ID, arg.Text, arg.IsCorrect)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.QuestionID,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}
