// Code generated by sqlc. DO NOT EDIT.
// source: quiz.sql

package db

import (
	"context"
)

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quizzes (
    name
) VALUES (
    $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateQuiz(ctx context.Context, name string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, createQuiz, name)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE from quizzes
WHERE id = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuiz, id)
	return err
}

const getQuiz = `-- name: GetQuiz :one
SELECT id, name, created_at FROM quizzes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuiz(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, getQuiz, id)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listQuizzes = `-- name: ListQuizzes :many
SELECT id, name, created_at FROM quizzes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListQuizzesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuizzes(ctx context.Context, arg ListQuizzesParams) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, listQuizzes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quiz{}
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuiz = `-- name: UpdateQuiz :one
UPDATE quizzes
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateQuizParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, updateQuiz, arg.ID, arg.Name)
	var i Quiz
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
